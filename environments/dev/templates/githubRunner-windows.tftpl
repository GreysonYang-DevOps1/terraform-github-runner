<powershell>
# Install IIS
Install-WindowsFeature -name Web-Server -IncludeManagementTools;
# Install the OpenSSH Client
Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0;
# Install the OpenSSH Server
Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0;
# Start the sshd service
Start-Service sshd;
# OPTIONAL but recommended:
Set-Service -Name sshd -StartupType 'Automatic';
# Reset password for Administrator
$accountpwd = "${LOCAL_USER_PWD}";
$NewPassword = ConvertTo-SecureString $accountpwd -AsPlainText -Force;
Set-LocalUser -Name "Administrator" -Password $NewPassword;
# Install Powershell 7
$tempDir = Join-Path ([System.IO.Path]::GetTempPath()) ([System.IO.Path]::GetRandomFileName());
$null = New-Item -ItemType Directory -Path $tempDir -Force -ErrorAction SilentlyContinue;
$release = "7.3.4";
$packageName = "PowerShell-$release-win-x64.msi";
$downloadURL = "https://github.com/PowerShell/PowerShell/releases/download/v$release/$packageName";
$packagePath = Join-Path -Path $tempDir -ChildPath $packageName;
Invoke-WebRequest -Uri $downloadURL -OutFile $packagePath;
$ArgumentList=@("/i", $packagePath, "/quiet");
$process = Start-Process msiexec -ArgumentList $ArgumentList -Wait -PassThru;
if ($process.exitcode -ne 0) {
    throw "Quiet install failed, please rerun install without -Quiet switch or ensure you have administrator rights"
}else {
    Remove-Item -Path $tempDir -Recurse -Force -ErrorAction SilentlyContinue
};
# Create a folder under the drive root
mkdir actions-runner; cd actions-runner;
# Download the latest runner package
Invoke-WebRequest -Uri https://github.com/actions/runner/releases/download/v${GITHUB_RUNNER_VERSION}/actions-runner-win-x64-${GITHUB_RUNNER_VERSION}.zip -OutFile actions-runner-win-x64-${GITHUB_RUNNER_VERSION}.zip;
# Extract the installer
Add-Type -AssemblyName System.IO.Compression.FileSystem ; [System.IO.Compression.ZipFile]::ExtractToDirectory("$PWD/actions-runner-win-x64-${GITHUB_RUNNER_VERSION}.zip", "$PWD");
# Get Registration Token
$PAT = "${GITHUB_PAT}";
$org = "${GITHUB_ORGANIZATION}";
$reg_url = "https://api.github.com/orgs/$org/actions/runners/registration-token";
$headers = @{
    'Accept' = 'application/vnd.github+json'
    'X-GitHub-Api-Version' = '${GITHUB_API_VERSION}'
    'Authorization' = "Bearer $PAT"
};
$reg_token = Invoke-RestMethod -Uri $reg_url -Method Post -Headers $headers | Select-Object -Property token -First 1 -ExpandProperty token;
# Create Scheduled Job for Runner Removal
$trigger = New-JobTrigger -Once -At (Get-Date).Date -RepetitionInterval (New-TimeSpan -Seconds 60) -RepeatIndefinitely
Register-ScheduledJob -Name Remove-Runner-Task -Trigger $trigger -ScriptBlock {
    $aws_token_url = "http://169.254.169.254/latest/api/token";
    $aws_token_headers = @{
        'X-aws-ec2-metadata-token-ttl-seconds' = '21600'
    };
    $aws_token = Invoke-RestMethod -Uri $aws_token_url -Method Put -Headers $aws_token_headers;
    $ec2_metadata_url = "http://169.254.169.254/latest/meta-data/autoscaling/target-lifecycle-state";
    $ec2_metadata_headers = @{
        'X-aws-ec2-metadata-token' = $aws_token
    };
    $ec2_lifecycle_state = Invoke-RestMethod -Uri $ec2_metadata_url -Method Get -Headers $ec2_metadata_headers;
    $date=Get-Date;
    $content="ScheduledJob Log: EC2 Lifecycle State: " + $ec2_lifecycle_state + "," + $date;
    Add-Content C:\ProgramData\Amazon\EC2Launch\log\agent.log $content;
    if($ec2_lifecycle_state -eq 'Terminated'){
        $PAT = "${GITHUB_PAT}";
        $org = "${GITHUB_ORGANIZATION}";
        $headers = @{
            'Accept' = 'application/vnd.github+json'
            'X-GitHub-Api-Version' = '2022-11-28'
            'Authorization' = "Bearer $PAT"
        };
        $remove_token_url = "https://api.github.com/orgs/$org/actions/runners/remove-token";
        $remove_token = Invoke-RestMethod -Uri $remove_token_url -Method Post -Headers $headers | Select-Object -Property token -First 1 -ExpandProperty token;
        C:\Windows\System32\actions-runner\config.cmd remove --token $remove_token;
    }else {
        $content="ScheduledJob Log: EC2 Lifecycle State: Not Terminated";
        Add-Content C:\ProgramData\Amazon\EC2Launch\log\agent.log $content;
    };
};
# Create the runner and start the configuration experience
./config.cmd --unattended --url https://github.com/${GITHUB_ORGANIZATION} --token $reg_token;
./run.cmd;
</powershell>